name: Tests

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=biql --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-examples:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test CLI examples
      run: |
        # Test that CLI works
        biql --help
        biql --version

    - name: Test basic queries
      run: |
        # Create a minimal BIDS dataset for testing
        mkdir -p test_dataset/sub-01/ses-1/func
        touch test_dataset/sub-01/ses-1/func/sub-01_ses-1_task-rest_bold.nii.gz
        touch test_dataset/sub-01/ses-1/func/sub-01_ses-1_task-rest_bold.json

        # Test basic queries
        cd test_dataset
        biql --validate "SELECT sub WHERE datatype=func"
        echo '{"TaskName": "rest", "RepetitionTime": 2.0}' > sub-01/ses-1/func/sub-01_ses-1_task-rest_bold.json

        # Test that queries don't crash on minimal dataset
        biql "SELECT DISTINCT sub" --format json || true
        biql "SELECT COUNT(*)" --format table || true
